/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * PokemonService API
 * OpenAPI spec version: 0.0.1
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  ListPokemonsResponse
} from '../../types/pokemons';


export const getPokemonServiceListPokemonsResponseMock = (overrideResponse: Partial< ListPokemonsResponse > = {}): ListPokemonsResponse => ({pokemons: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), ...overrideResponse})


export const getPokemonServiceListPokemonsMockHandler = (overrideResponse?: ListPokemonsResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ListPokemonsResponse> | ListPokemonsResponse)) => {
  return http.get('*/v1/pokemons', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPokemonServiceListPokemonsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getPokemonServiceAPIMock = () => [
  getPokemonServiceListPokemonsMockHandler()
]
